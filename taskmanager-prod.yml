spring:
  application:
    name: taskmanager

  data:
    redis:
      host: ${SPRING_REDIS_HOST}  # Redis 
      port: ${SPRING_REDIS_PORT}
      timeout: 3000ms

  redis:
    lettuce:
      pool:
        max-active: 10  # 連線池最大活動連線數
        max-idle: 10    # 最大空閒連線數
        min-idle: 1     # 最小空閒連線數
        max-wait: 1s    # 最大等待時間

  task:
    execution:
      pool:
        core-size: 5        # 執行緒池最小執行緒數量
        max-size: 10        # 執行緒池最大執行緒數量
        queue-capacity: 25  # 任務隊列容量
        keep-alive: 60s     # 執行緒空閒超過此時間會被銷毀

  datasource:
    master:  #正式環境不使用 allowPublicKeyRetrieval=true , useSSL 改成 true
      url: jdbc:mysql://mysql-master:3306/task_manager?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
      username: ${MYSQL_USERNAME}
      password: ${MYSQL_PASSWORD}
      driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC Driver
      hikari:
        maximum-pool-size: 10  # 最多同時存在幾個 connection
        minimum-idle: 2  # 最少保持幾個閒置連線
        idle-timeout: 30000  # 閒置多久會被關閉（毫秒）
        connection-timeout: 300000  # 等待連線的最大時間
        pool-name: HikariMasterPool
        max-lifetime: 1800000  # 每個 connection 存活時間，過久會自動斷開再創建
    slave:
        url: jdbc:mysql://mysql-slave:3306/task_manager?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
        username: ${MYSQL_USERNAME}
        password: ${MYSQL_PASSWORD}
        driver-class-name: com.mysql.cj.jdbc.Driver  # JDBC Driver
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          idle-timeout: 30000
          connection-timeout: 300000
          pool-name: HikariSlavePool
          max-lifetime: 1800000
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: update  # 自動建立 / 更新資料表結構
      
  mail:
    host: smtp.gmail.com
    port: 587
    username: email@gmail.com
    password: password
    protocol: smtp
    default-encoding: UTF-8
    test-connection: false
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: taskmanager-notification-group
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.taskmanager.entity.dto
    producer:
      key-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# 自訂 @ConditionalOnProperty 切換 notification publisher 使用 一般Listener 或是 kafka
notification:
  mode: kafka # 或 default

jwt:
  secretKey: ${JWT_SECRET_KEY}  # JWT 秘鑰

server:
  port: ${SERVER_PORT}

rabbitmq:
  retry:
    max: 10  # 最大重試次數
  exchange: task.exchange  # 主要交換器名稱
  exchange.dlq: task.exchange.dlq # 死信交換器名稱
  routingkey:
    task:
      pattern: task.#          # 路由鍵模式
      created: task.created
      assigned: task.assigned
      overdue: task.overdue
      dlq: task.dlq
  queue:
    task:
      created: task.created.queue
      assigned: task.assigned.queue
      overdue: task.overdue.queue
      dlq: task.dlq.queue

springdoc:
  api-docs:
    path: /v3/api-docs  # OpenAPI 
  swagger-ui:
    path: /swagger-ui.html  # Swagger UI 路徑

mybatis:
  mapper-locations: classpath:mapper/*.xml  # MyBatis mapper XML 位置
  type-aliases-package: com.example.taskmanager.entity  # MyBatis type aliases package
  configuration:
    map-underscore-to-camel-case: true  # 將資料庫欄位名稱（通常是蛇形命名， user_name）轉換為 Java 物件的駝峰命名（userName），避免 SQL 結果和 Java 類的映射錯誤
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # 印出 MyBatis 執行的 SQL 在 console

management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,metrics  # 指定哪些 Actuator endpoint 是對外開放的（可透過 HTTP 存取，例如 /actuator/health）